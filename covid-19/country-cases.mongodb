// Run this against MongoDB's COVID-19 Atlas cluster
// mongodb+srv://readonly:readonly@covid-19.hip2i.mongodb.net/covid19?authSource=admin&replicaSet=covid-19-shard-0&readPreference=primary&ssl=true

const path = require('path');
const fs = require('fs');
const process = require('process');

use('covid19');

// Configuration
const countries = ['US'];
const colors = ['#F9DB6D', '#00D9C0', '#C33C54'];
const from = new Date('2020-06-01');
const outputFile = path.join(process.cwd(), 'out', `covid-data-${countries.join('-')}.json5`);


// Get COVID-19 cases from a certain date for a specific country
function dailyCases(from, country) {
    const match = {
        $match: {
          country_iso2s: country,
          date: {
              $gte: from
          }
        }
    };

    const sort = {
        $sort: {
          date: 1
        }
    };

    return db.countries_summary.aggregate([match, sort]);
}

// Normally, I'd simply `map()` the countries array
// However, there is a limitation in the MongoDB shell in that
// it's not possible to run async Shell API calls within the mapping function.
// For this reason, I am falling back to an old school `for` loop.
const results = [];
for (let i = 0; i < countries.length; i++) {
    const country = countries[i];
    results.push({
        country,
        data: dailyCases(from, country).toArray()
    });
}

// Now I am going to do loop the arrays and add the difference in
// # of cases from the previous days
const augmentedResults = results.map(({country, data}) => {
    return {
        country,
        data: data.map((document, index, array) => {
            return {
                ...document,
                newCases: index === 0 ? 0 : document.confirmed - array[index - 1].confirmed
            };
        })
    }
});

const output =
`
{
    type: 'line',
    data: {
        labels: [${augmentedResults[0].data.map(d => `'${d.date.getFullYear()}/${d.date.getMonth() + 1}/${d.date.getDate()}'`).join(',')}],
        datasets: [
            ${augmentedResults.map(({country, data}, index) => {
                return `
                {
                    label: '# of Cases in ${country}',
                    data: [${data.map(d => d.newCases).join(',')}],
                    fill: ${index === 0 ? `'origin'` : `'-1'`},
                    borderColor: '${colors[index]}',
                    backgroundColor: '${colors[index]}33',
                    borderWidth: 1
                }
                `;
            })}
        ]
    }
}
`;

fs.writeFileSync(outputFile, output, 'utf8');
`Results are in ${outputFile}`;